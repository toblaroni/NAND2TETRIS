// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx,            // zero the x input?
        nx,            // negate the x input?
        zy,            // zero the y input?
        ny,            // negate the y input?
        f,             // compute (out = x + y) or (out = x & y)?
        no;            // negate the out output?
    OUT 
        out[16],       // 16-bit output
        zr,            // if (out == 0) equals 1, else 0
        ng;            // if (out < 0)  equals 1, else 0

    PARTS:
    // --- Basic Functions ---
    // PRECOMPUTING X
    // zx
    And16 (a=x, b=false, out=zero16);
    Mux16 (a=x, b=zero16, sel=zx, out=xafterzx);
    // nx
    Not16 (in=xafterzx, out=notxafterzx);
    Mux16 (a=xafterzx, b=notxafterzx, sel=nx, out=xafternx);

    // PRECOMPUTING Y
    // zy
    Mux16 (a=y, b=zero16, sel=zy, out=yafterzy);
    // ny
    Not16 (in=yafterzy, out=notyafterzy);
    Mux16 (a=yafterzy, b=notyafterzy, sel=ny, out=yafterny);

    // ARITHMETIC OR LOGICAL OPERATION (f)
    And16 (a=xafternx, b=yafterny, out=xAndy);
    Add16 (a=xafternx, b=yafterny, out=xPlusy);
    Mux16 (a=xAndy, b=xPlusy, sel=f, out=resafterf);

    // NEGATE OUTPUT (no)
    Not16 (in=resafterf, out=notresafterf);
    Mux16 (a=resafterf, b=notresafterf, sel=no, out[15]=msb, out[0..7]=bottomout, out[8..15]=topout, out=out);


    // --- zr and ng ---
    // zr
    Or8Way (in=bottomout, out=checktop);
    Or8Way (in=topout, out=checkbottom);
    Or (a=checkbottom, b=checktop, out=contains1);  // Will be 1 if out contains a 1
    Not (in=contains1, out=zr);

    // ng
    // If the most significant bit is 1 you know it's negative...
    And (a=msb, b=true, out=ng);

}