// Game of Life in Jack
// The screen is 256 rows of 512 pixels.
// OPTIMISATION -> Use a bitmap to render the cells...
class GameOfLife {
    field int rows, cols, cell_size;
    field Board board_1, board_2;     // Alternate between displaying one, and then displaying the other
    field boolean draw_board_1;       // Which board are we currently displaying

    constructor GameOfLife new(int resolution) {
        let draw_board_1 = false;   // Display board_1

        if (resolution > 8) {
            let resolution = 8;
        }

        if (resolution < 0) {
            let resolution = 2;
        }
    }


    method void draw() {
        if (draw_board_1) {
            let cur_board = board_1;
        } else {
            let cur_board = board_2;
        }

    }

    method void update() {
        var Cell current_cell, new_cell;
        var Array new_board, cur_board;
        var int neighbor_count;
        var int i, j;

        // Do this to avoid a big if else statement. Just reads nicer i think
        if (draw_board_1) {
            let cur_board = board_1;
            let new_board = board_2;
            let draw_board_1 = false;
        } else {
            let cur_board = board_2;
            let new_board = board_1;
            let draw_board_1 = true;
        }

        let i = 0;
        while (i < rows) {
            let j = 0;

            while (j < cols) {
                let current_cell   = GameOfLife.get_cell(j, i, cur_board);
                let new_cell       = GameOfLife.get_cell(j, i, new_board);
                let neighbor_count = current_cell.num_neighbours(cur_board);

                if (neighbor_count < 2 | neighbor_count > 3) {
                    do new_cell.kill();
                } if (neighbor_count = 2 | neighbor_count = 3) {
                    do new_cell.bring_alive();
                }

                let j = j + 1;
            }

            let i = i + 1;
        }

        return;
    }

}
