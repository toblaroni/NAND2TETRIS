// Game of Life in Jack
// The screen is 256 rows of 512 pixels.
// OPTIMISATION -> Use a bitmap to render the cells...
// Additions -> make it an "infinite" map by looping back round when reaching the edge of the board
class GameOfLife {
    field Board board_1, board_2;     // Alternate between displaying one, and then displaying the other
    field boolean draw_board_1;       // Which board are we currently displaying

    constructor GameOfLife new(int cell_size) {
        let draw_board_1 = false;   // Display board_1
        let board_1 = Board.new(cell_size);
        let board_2 = Board.new(cell_size);
        return this;
    }

    method void draw() {
        if (draw_board_1) {
            do board_1.draw_board();
        } else {
            do board_2.draw_board();
        }
        return;
    }

    method void update() {
        var Cell current_cell, new_cell;
        var Board new_board, cur_board;
        var int neighbor_count;
        var int i, j;

        // Do this to avoid a big if else statement. Just reads nicer i think
        if (draw_board_1) {
            let cur_board = board_1;
            let new_board = board_2;
            let draw_board_1 = false;
        } else {
            let cur_board = board_2;
            let new_board = board_1;
            let draw_board_1 = true;
        }

        let i = 0;
        while (i < board_1.get_height()) {
            let j = 0;

            while (j < board_1.get_width()) {
                let current_cell   = cur_board.get_cell(j, i);
                let new_cell       = new_board.get_cell(j, i);
                let neighbor_count = current_cell.num_neighbours();

                if (current_cell.is_alive()) {
                    // Rule 1 and Rule 3: Any live cell with fewer than 2 or more than 3 live neighbors dies.
                    if ((neighbor_count < 2) | (neighbor_count > 3)) {
                        do new_cell.kill();
                    }
                    // // Rule 2: Any live cell with 2 or 3 live neighbors lives.
                    if ((neighbor_count = 2) | (neighbor_count = 3)) {
                        do new_cell.bring_alive();
                    }
                } else {
                    // Rule 4: Any dead cell with exactly 3 live neighbors becomes a live cell.
                    if (neighbor_count = 3) {
                        do new_cell.bring_alive();
                    } else {
                        do new_cell.kill();
                    }
                }

                let j = j + 1;
            }

            let i = i + 1;
        }

        return;
    }

}
