
class Cell {
    field boolean alive;
    field int x, y, size, i, j;
    field Board board;  // The board this cell belongs to

    static Cell cell;

    constructor Cell new(int i_, int j_, int size_, boolean alive_, Board board_) {
        let i = i_;
        let j = j_;
        let size = size_;
        let alive = alive_;
        let board = board_;


        let y = j * size_;
        let x = i * size_;

        return this;
    }

    method void draw() {
        if (is_alive()) {
            do Screen.setColor(true); // Set black
        } else {
            do Screen.setColor(false);
        }

        do Screen.drawRectangle(x, y, x + size, y + size);
        return;
    }

    method boolean is_alive() {
        return alive;
    }

    method void kill() {
        let alive = false;
        return;
    }

    method void bring_alive() {
        let alive = true;
        return;
    }

    method int num_neighbours() {
        /*
            board is the 2D board array
                  x ---------->
                +----+-----+----+
                | NW |  N  | NE |
                +----+-----+----+
                | W  |  C  | E  |       # C is 'this'
                +----+-----+----+
                | SW |  S  | SE |
                +----+-----+----+

        */

        return NW() + N() + NE() + E() + SE() + S() + SW() + W();
    }

    method int NW() {
        if ((i = 0) | (j = 0)) {  return 0; } 

        let cell = board.get_cell((i-1), (j-1));
        return cell.is_alive_int();
    }

    method int N() {
        if (j = 0) { return 0; } 

        let cell = board.get_cell(i, (j-1));
        return cell.is_alive_int();
    }

    method int NE() {
        if ((j = 0) | (i = (board.get_width()-1))) { return 0; } 

        let cell = board.get_cell((i+1), (j-1));
        return cell.is_alive_int();
    }

    method int E() {
        if (i = (board.get_width()-1)) { return 0; } 

        let cell = board.get_cell((x+1), y);
        return cell.is_alive_int();
    }

    method int SE() {
        if ((j = (board.get_height()-1)) | (i = (board.get_width()-1))) { return 0; } 

        let cell = board.get_cell((i+1), (j+1));
        return cell.is_alive_int();
    }
    
    method int S() {
        if (j = (board.get_height()-1)) { return 0; } 

        let cell = board.get_cell(i, (j+1));
        return cell.is_alive_int();
    }
    
    method int SW() {
        if ((j = (board.get_height()-1)) | (i = 0)) { return 0; } 

        let cell = board.get_cell((i-1), (j+1));
        return cell.is_alive_int();
    }
    
    method int W() {
        if (i = 0) { return 0; } 

        let cell = board.get_cell((i-1), j);
        return cell.is_alive_int();
    }

    method int is_alive_int() {
        if (alive) {
            return 1;
        } else {
            return 0;
        }
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
}