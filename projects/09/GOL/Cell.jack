
class Cell {
    field boolean alive;
    field int x, y, size;

    constructor Cell new(int x_, int y_, int size_, boolean alive_) {
        let x = x_;
        let y = y_;
        let size = size_;
        let alive = alive_;

        return this;
    }

    method void draw() {
        if (is_alive()) {
            do Screen.setColor(true); // Set black
        } else {
            do Screen.setColor(false);
        }

        do Screen.drawRectangle(x, y, x + size, y + size);
        return;
    }

    method boolean is_alive() {
        return alive;
    }

    method void kill() {
        let alive = false;
        return;
    }

    method void bring_alive() {
        let alive = true;
        return;
    }

    method int num_neighbours(GameOfLife board) {
        /*
            board is the 2D board array
                +----+-----+----+
                | NW |  N  | NE |
                +----+-----+----+
                | W  |  C  | E  |       # C is 'this'
                +----+-----+----+
                | SW |  S  | SE |
                +----+-----+----+
        */

        return NW(board) + N(board) +
               NE(board) + E(board) + 
               SE(board) + S(board) + 
               SW(board) + W(board);
    }

    method int NW(GameOfLife board) {
        var Cell cell;

        if (x = 0 | y = 0) {  return 0; } 

        let cell = GameOfLife.get_cell(x-1, y-1, board);
        return cell.is_alive_int();
    }

    method int N(GameOfLife board) {
        var Cell cell;

        if (y = 0) { return 0; } 

        let cell = GameOfLife.get_cell(x, y-1, board);
        return cell.is_alive_int();
    }

    method int NE(GameOfLife board) {
        var Cell cell;

        if (y = 0 | x = board.get_width()) { return 0; } 

        let cell = GameOfLife.get_cell(x+1, y-1, board);
        return cell.is_alive_int();
    }

    method int E(GameOfLife board) {
        var Cell cell;

        if (x = board.get_width()) { return 0; } 

        let cell = GameOfLife.get_cell(x+1, y, board);
        return cell.is_alive_int();
    }
    method int SE(GameOfLife board) {
        var Cell cell;

        if (y = board.get_height() | x = board.get_width()) { return 0; } 

        let cell = GameOfLife.get_cell(x+1, y+1, board);
        return cell.is_alive_int();
    }
    
    method int S(GameOfLife board) {
        var Cell cell;

        if (y = board.get_height()) { return 0; } 

        let cell = GameOfLife.get_cell(x, y+1, board);
        return cell.is_alive_int();
    }
    
    method int SW(GameOfLife board) {
        var Cell cell;

        if (y = board.get_height() | x = 0) { return 0; } 

        let cell = GameOfLife.get_cell(x-1, y+1, board);
        return cell.is_alive_int();
    }
    
    method int W(GameOfLife board) {
        var Cell cell;

        if (x = 0) { return 0; } 

        let cell = GameOfLife.get_cell(x-1, y, board);
        return cell.is_alive_int();
    }

    method int is_alive_int() {
        if (is_alive()) {
            return 1;
        } else {
            return 0;
        }
    }
}