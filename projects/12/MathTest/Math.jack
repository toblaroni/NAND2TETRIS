// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/** A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static int n;             // Number of bits used for representing a two's complement integer
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    // Initializes the Math library.
    function void init() {
        let n = 16; 
        let powersOfTwo = Array.new(n);


        return;
    }

    function int bit(int x, int j) {
        var int andResult;

        let andResult = x & powersOfTwo[j];

        return powersOfTwo[j];

        /*
        if (andResult = 0) {
            return 0;
        }
        return 1; 
        */
    }

    /** Returns the number of bits in b
     *  Starts at leftmost bit and loops until a 1 is found.
     *
     */
    function int numBits(int b) {
        var int i;

        let i = 0;

        while (i < n) {
            if (Math.bit(b, (n-1)-i) = 1) { // Check bits 15 -> 0 
                return n-i;
            }
            let i = i + 1;
        }

        return 0;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method. 
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, j, numBits;

        if ((x = 0) | (y = 0)) {
            return 0;
        }

        if (x = 1) {
            return y;
        }

        if (y = 1) {
            return x;
        }
        
        let sum = 0;
        let shiftedX = x;
        let j = 0;
        let numBits = Math.numBits(y);

        return numBits;

        /*
        while (j < numBits) {
            if (Math.bit(y, j) = 1) {
                let sum = sum + shiftedX;
            }
            let j = j + 1;
            let shiftedX = shiftedX + shiftedX;     // Shift 1-bit to the left
        }

        return sum;
        */
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var bool isNeg; 
        var int q, retVal;

        let isNeg = false;

        if (y > x) {
            return 0;   
        }

        if ((x < 0) & (y < 0)) {
            let x = Math.abs(x);
            let y = Math.abs(y);
        }
        
        if (y < 0) {
            let isNeg = true;
            let y = Math.abs(y);
        }

        if (x < 0) {
            let isNeg = true;
            let x = Math.abs(x);
        }

        let q = Math.divide(x, 2*y);

        if ((x-(2*q*y)) < y) {
            let retVal = 2*q;
        } else {
            let retVal = ((2*q)+1);
        }

        if (isNeg) {
            return retVal * (-1);
        }

        return retVal;
    }

    /** Returns the integer part of the square root of x.
    */
    function int sqrt(int x) {
        var int y, j, temp;

        let j = (n/2)-1;
        let y = 0;

        while (j > (-1)) {
            let temp = y + powersOfTwo[j];
            if (((temp * temp) < (x+1)) & 
                ((temp * temp) > 0)) {

                let y = y + powersOfTwo[j];
            }

            let j = j - 1;
        }

        return y;
    }

    /** Returns the greater value.
    */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller value.
    */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        return b;
    }

    /** Returns the absolute value of x
    */
    function int abs(int x) {
        if (x < 0) {
            return x*(-1);
        }
        return x;
    }
}
