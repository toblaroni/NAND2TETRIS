// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    // --- Decoding Instruction ---
    // -- C Instruction -- 
    // - Loading the A register -
    // If instruction[5] == 1 and opcode == 1we want to load the A register
    And (a=instruction[5], b=instruction[15], out=d1Andopcode);

    // If opcode is 0 then we want to load A register
    Not (in=instruction[15], out=notOpcode);
    
    Or (a=d1Andopcode, b=notOpcode, out=loadARegister);

    // A Register input
    // If opcode is zero -> load with instruction, else load ALU out.
    Mux16 (a=instruction, b=ALUOut, sel=instruction[15], out=ARegisterIn);
    ARegister (in=ARegisterIn, load=loadARegister, out=ARegisterOut);

    // -- D Register --
    And (a=instruction[15], b=instruction[4], out=loadDRegister);
    DRegister (in=ALUOut, load=loadDRegister, out=DRegisterOut);

    // -- Choose A/M for ALU input (Using bit 'a' of instruction) --
    Mux16 (a=ARegisterOut, b=inM, sel=instruction[12], out=AMRegisterOut);

    // --- ALU ---    
    ALU (x=DRegisterOut, y=AMRegisterOut, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUOut, out=outM, zr=zr, ng=ng);

    // -- WriteM --
    // Has to be a C instruction to write
    And (a=instruction[15], b=instruction[3], out=writeM);

    // -- addressM --
    Or16 (a=false, b=ARegisterOut, out[0..14]=addressM);

    // --- Program Counter ---
    // -- Control bits --
    Not (in=zr, out=notzr);
    Not (in=ng, out=notng);

    DMux8Way (in=instruction[15], sel=instruction[0..2], a=noJump, b=jgt, c=jeq, d=jge, e=jlt, f=jne, g=jle, h=jmp);

    And3Way (a=notng, b=notzr, c=jgt, out=jgtLoad);  // JGT
    And3Way (a=notng, b=zr, c=jeq, out=jeqLoad);     // JEQ
    And     (a=notng, b=jge, out=jgeLoad);           // JGE
    And3Way (a=ng, b=notzr, c=jlt, out=jltLoad);     // JLT
    And     (a=notzr, b=jne, out=jneLoad);           // JNE
    Xor     (a=ng, b=zr, out=ngXorzr);
    And     (a=ngXorzr, b=jle, out=jleLoad);         // JLE

    // Combine all control bits, if any of them are one then we want to load
    Or8Way (in[0]=false, in[1]=jgtLoad, in[2]=jeqLoad, in[3]=jgeLoad, in[4]=jltLoad, in[5]=jneLoad, in[6]=jleLoad, in[7]=jmp, out=pcLoad);    

    // Inc is always true since it gets overrided by reset or load
    PC (in=ARegisterOut, load=pcLoad, inc=true, reset=reset, out[0..14]=pc);
}
